
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id    String @id @default(cuid())
  name  String
  email String @unique
  domain String @unique
  address String?
  phone String?
  type String? // PRIMARY, SECONDARY, COLLEGE, UNIVERSITY
  status TenantStatus @default(TRIAL)
  subscriptionPlan String @default("TRIAL") // TRIAL, BASIC, STANDARD, PREMIUM
  maxUsers Int @default(100)
  userCount Int @default(0)
  features String? // JSON string of features array
  timezone String @default("Africa/Dar_es_Salaam")
  language String @default("en")
  currency String @default("TZS")
  subscriptionExpiry DateTime?
  lastActivity DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users User[]
  roles Role[]
  courses Course[]
  subjects Subject[]
  academicYears AcademicYear[]
  examinations Examination[]
  grades Grade[]
  gradingScales GradingScale[]
  schedules Schedule[]
  classes Class[]
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

model User {
  id        String @id @default(cuid())
  tenantId  String
  email     String
  password  String
  firstName String
  lastName  String
  phone     String?
  address   String?
  status    UserStatus @default(ACTIVE)
  lastLogin DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles UserRole[]
  
  // Academic relationships
  teacherSubjects TeacherSubject[]
  createdCourses Course[] @relation("CourseCreatedBy")
  updatedCourses Course[] @relation("CourseUpdatedBy")
  createdSubjects Subject[] @relation("SubjectCreatedBy")
  updatedSubjects Subject[] @relation("SubjectUpdatedBy")
  createdAcademicYears AcademicYear[] @relation("AcademicYearCreatedBy")
  updatedAcademicYears AcademicYear[] @relation("AcademicYearUpdatedBy")
  
  // Examination & Grading relationships
  studentGrades Grade[] @relation("StudentGrades")
  createdExaminations Examination[] @relation("ExaminationCreatedBy")
  updatedExaminations Examination[] @relation("ExaminationUpdatedBy")
  createdGrades Grade[] @relation("GradeCreatedBy")
  updatedGrades Grade[] @relation("GradeUpdatedBy")
  createdGradingScales GradingScale[] @relation("GradingScaleCreatedBy")
  updatedGradingScales GradingScale[] @relation("GradingScaleUpdatedBy")
  
  // Schedule relationships
  teacherSchedules Schedule[] @relation("ScheduleTeacher")
  createdSchedules Schedule[] @relation("ScheduleCreatedBy")
  updatedSchedules Schedule[] @relation("ScheduleUpdatedBy")
  
  // Class relationships
  createdClasses Class[] @relation("ClassCreatedBy")
  updatedClasses Class[] @relation("ClassUpdatedBy")

  @@unique([tenantId, email])
}

model Role {
  id          String @id @default(cuid())
  tenantId    String
  name        String
  description String?
  isSystem    Boolean @default(false) // System roles vs custom roles
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles UserRole[]
  rolePermissions RolePermission[]

  @@unique([tenantId, name])
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String // e.g., 'users', 'courses', 'subjects'
  action      String // e.g., 'create', 'read', 'update', 'delete'
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]

  @@unique([resource, action])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  createdAt DateTime @default(now())

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// Academic Models for Story 2.1
model Course {
  id          String @id @default(cuid())
  tenantId    String
  courseCode  String
  courseName  String
  description String?
  credits     Int     @default(0)
  status      CourseStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("CourseCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("CourseUpdatedBy", fields: [updatedBy], references: [id])
  courseSubjects CourseSubject[]

  @@unique([tenantId, courseCode])
}

model Subject {
  id           String @id @default(cuid())
  tenantId     String
  subjectName  String
  subjectCode  String?
  subjectLevel SubjectLevel
  subjectType  SubjectType
  description  String?
  credits      Int     @default(0)
  status       SubjectStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("SubjectCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("SubjectUpdatedBy", fields: [updatedBy], references: [id])
  courseSubjects CourseSubject[]
  teacherSubjects TeacherSubject[]
  examinations Examination[]
  grades Grade[]
  schedules Schedule[]

  @@unique([tenantId, subjectName, subjectLevel])
}

model CourseSubject {
  id        String @id @default(cuid())
  tenantId  String
  courseId  String
  subjectId String
  isRequired Boolean @default(true)
  
  createdAt DateTime @default(now())

  // Relationships
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([tenantId, courseId, subjectId])
}

model TeacherSubject {
  id        String @id @default(cuid())
  tenantId  String
  teacherId String
  subjectId String
  
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  teacher User @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([tenantId, teacherId, subjectId])
}

model AcademicYear {
  id        String @id @default(cuid())
  tenantId  String
  yearName  String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean @default(false)
  status    AcademicYearStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("AcademicYearCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("AcademicYearUpdatedBy", fields: [updatedBy], references: [id])
  examinations Examination[]

  @@unique([tenantId, yearName])
}

model Class {
  id          String @id @default(cuid())
  tenantId    String
  className   String
  classCode   String?
  description String?
  capacity    Int     @default(30)
  status      ClassStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("ClassCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("ClassUpdatedBy", fields: [updatedBy], references: [id])
  schedules Schedule[]

  @@unique([tenantId, className])
}

// Examination & Grading Models for Story 4.1
model Examination {
  id          String @id @default(cuid())
  tenantId    String
  examName    String
  examType    ExamType
  examLevel   SubjectLevel
  subjectId   String?
  academicYearId String?
  startDate   DateTime
  endDate     DateTime?
  maxMarks    Int     @default(100)
  weight      Float   @default(1.0) // Weight for term calculation
  status      ExamStatus @default(DRAFT)
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id])
  academicYear AcademicYear? @relation(fields: [academicYearId], references: [id])
  createdByUser User @relation("ExaminationCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("ExaminationUpdatedBy", fields: [updatedBy], references: [id])
  grades Grade[]

  @@unique([tenantId, examName, examType])
}

model Grade {
  id            String @id @default(cuid())
  tenantId      String
  examinationId String
  studentId     String
  subjectId     String
  rawMarks      Float
  percentage    Float
  grade         String? // A+, A, B+, B, C+, C, D, F
  points        Float?  // For NECTA division calculation
  status        GradeStatus @default(DRAFT)
  comments      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  examination Examination @relation(fields: [examinationId], references: [id], onDelete: Cascade)
  student User @relation("StudentGrades", fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  createdByUser User @relation("GradeCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("GradeUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([tenantId, examinationId, studentId, subjectId])
}

model GradingScale {
  id          String @id @default(cuid())
  tenantId    String
  scaleName   String
  examLevel   SubjectLevel
  gradeRanges Json   // JSON array of grade ranges: [{"grade": "A+", "min": 90, "max": 100, "points": 7}]
  isDefault   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("GradingScaleCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("GradingScaleUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([tenantId, scaleName, examLevel])
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SubjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SubjectLevel {
  PRIMARY
  O_LEVEL
  A_LEVEL
  UNIVERSITY
}

enum SubjectType {
  CORE
  OPTIONAL
  COMBINATION
}

enum AcademicYearStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ExamType {
  QUIZ
  MID_TERM
  FINAL
  MOCK
  NECTA
  ASSIGNMENT
  PROJECT
}

enum ExamStatus {
  DRAFT
  SCHEDULED
  ONGOING
  COMPLETED
  PUBLISHED
  ARCHIVED
}

enum GradeStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum ScheduleType {
  CLASS
  EXAM
  EVENT
  MEETING
}

enum ScheduleStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  DRAFT
}

enum ClassStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

// Schedule Management Model for Academic Calendar
model Schedule {
  id          String @id @default(cuid())
  tenantId    String
  title       String
  type        ScheduleType
  subjectId   String?
  teacherId   String?
  classId     String?
  startTime   DateTime
  endTime     DateTime
  date        DateTime
  location    String?
  status      ScheduleStatus @default(ACTIVE)
  description String?
  recurring   Boolean @default(false)
  
  // Recurrence settings
  recurrenceType String? // DAILY, WEEKLY, MONTHLY
  recurrenceEnd  DateTime?
  recurrencePattern Json? // For complex recurrence patterns
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id])
  teacher User? @relation("ScheduleTeacher", fields: [teacherId], references: [id])
  class Class? @relation(fields: [classId], references: [id])
  createdByUser User @relation("ScheduleCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("ScheduleUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([tenantId, title, date, startTime])
  @@index([tenantId, date])
  @@index([tenantId, type])
  @@index([tenantId, status])
}

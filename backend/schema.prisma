
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id    String @id @default(cuid())
  name  String
  email String @unique
  domain String @unique
  address String?
  phone String?
  type String? // PRIMARY, SECONDARY, COLLEGE, UNIVERSITY
  status TenantStatus @default(TRIAL)
  subscriptionPlan String @default("TRIAL") // TRIAL, BASIC, STANDARD, PREMIUM
  maxUsers Int @default(100)
  userCount Int @default(0)
  features String[] // Array of feature strings
  timezone String @default("Africa/Dar_es_Salaam")
  language String @default("en")
  currency String @default("TZS")
  subscriptionExpiry DateTime?
  lastActivity DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users User[]
  roles Role[]
  courses Course[]
  subjects Subject[]
  academicYears AcademicYear[]
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

model User {
  id        String @id @default(cuid())
  tenantId  String
  email     String
  password  String
  firstName String
  lastName  String
  phone     String?
  address   String?
  status    UserStatus @default(ACTIVE)
  lastLogin DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles UserRole[]
  
  // Academic relationships
  teacherSubjects TeacherSubject[]
  createdCourses Course[] @relation("CourseCreatedBy")
  updatedCourses Course[] @relation("CourseUpdatedBy")
  createdSubjects Subject[] @relation("SubjectCreatedBy")
  updatedSubjects Subject[] @relation("SubjectUpdatedBy")
  createdAcademicYears AcademicYear[] @relation("AcademicYearCreatedBy")
  updatedAcademicYears AcademicYear[] @relation("AcademicYearUpdatedBy")

  @@unique([tenantId, email])
}

model Role {
  id          String @id @default(cuid())
  tenantId    String
  name        String
  description String?
  isSystem    Boolean @default(false) // System roles vs custom roles
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userRoles UserRole[]
  rolePermissions RolePermission[]

  @@unique([tenantId, name])
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String // e.g., 'users', 'courses', 'subjects'
  action      String // e.g., 'create', 'read', 'update', 'delete'
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]

  @@unique([resource, action])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  createdAt DateTime @default(now())

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// Academic Models for Story 2.1
model Course {
  id          String @id @default(cuid())
  tenantId    String
  courseCode  String
  courseName  String
  description String?
  credits     Int     @default(0)
  status      CourseStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("CourseCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("CourseUpdatedBy", fields: [updatedBy], references: [id])
  courseSubjects CourseSubject[]

  @@unique([tenantId, courseCode])
}

model Subject {
  id           String @id @default(cuid())
  tenantId     String
  subjectName  String
  subjectCode  String?
  subjectLevel SubjectLevel
  subjectType  SubjectType
  description  String?
  credits      Int     @default(0)
  status       SubjectStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("SubjectCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("SubjectUpdatedBy", fields: [updatedBy], references: [id])
  courseSubjects CourseSubject[]
  teacherSubjects TeacherSubject[]

  @@unique([tenantId, subjectName, subjectLevel])
}

model CourseSubject {
  id        String @id @default(cuid())
  tenantId  String
  courseId  String
  subjectId String
  isRequired Boolean @default(true)
  
  createdAt DateTime @default(now())

  // Relationships
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([tenantId, courseId, subjectId])
}

model TeacherSubject {
  id        String @id @default(cuid())
  tenantId  String
  teacherId String
  subjectId String
  
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  teacher User @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([tenantId, teacherId, subjectId])
}

model AcademicYear {
  id        String @id @default(cuid())
  tenantId  String
  yearName  String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean @default(false)
  status    AcademicYearStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User @relation("AcademicYearCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User @relation("AcademicYearUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([tenantId, yearName])
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SubjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SubjectLevel {
  PRIMARY
  O_LEVEL
  A_LEVEL
  UNIVERSITY
}

enum SubjectType {
  CORE
  OPTIONAL
  COMBINATION
}

enum AcademicYearStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}
